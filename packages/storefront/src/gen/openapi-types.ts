/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/storefront/address_fields": {
    /** Retrieve an address field list. */
    get: operations["getAddress FieldCollection"];
    parameters: {};
  };
  "/api/storefront/address_fields/{id}": {
    /** Retrieve an address field by id. */
    get: operations["getAddress FieldItem"];
    parameters: {};
  };
  "/api/storefront/auth/login": {
    post: operations["apiStorefrontAuthLogin"];
    parameters: {};
  };
  "/api/storefront/auth/logout": {
    post: operations["apiStorefrontAuthLogout"];
    parameters: {};
  };
  "/api/storefront/auth/refresh": {
    post: operations["apiStorefrontAuthRefresh"];
    parameters: {};
  };
  "/api/storefront/auth/reset_password": {
    /** Reset password and send new password to the user's e-mail. */
    post: operations["resetPasswordAuthenticationCollection"];
    parameters: {};
  };
  "/api/storefront/auth/whoami": {
    /** Retrieve user info of an authenticated user. */
    get: operations["whoamiAuthenticationItem"];
    parameters: {};
  };
  "/api/storefront/brands/compact": {
    /** Retrieve a brand  list. */
    get: operations["getBrand CompactCollection"];
    parameters: {};
  };
  "/api/storefront/brands/compact/{id}": {
    /** Retrieve a brand  by id. */
    get: operations["getBrand CompactItem"];
    parameters: {};
  };
  "/api/storefront/brands/detailed/by_clean_url/{clean_url}": {
    /** Retrieve a brand by clean url. */
    get: operations["getByCleanURLBrand DetailedItem"];
    parameters: {};
  };
  "/api/storefront/brands/detailed/{id}": {
    /** Retrieve a brand  by id. */
    get: operations["getBrand DetailedItem"];
    parameters: {};
  };
  "/api/storefront/carts": {
    /** Create a storefront cart. */
    post: operations["postStorefront CartCollection"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/addresses": {
    /** Retrieve a cart address list. */
    get: operations["getCart AddressCollection"];
    /** Create a cart address. */
    post: operations["postCart AddressCollection"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/addresses/{id}": {
    /** Retrieve a cart address by id. */
    get: operations["getCart AddressItem"];
    /** Delete a cart address by id. */
    delete: operations["deleteCart AddressItem"];
    /** Partially change a cart address by id. */
    patch: operations["patchCart AddressItem"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/calculatedShippingRates": {
    /** Calculated shipping rates. */
    post: operations["postCalculated shipping ratesCollection"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/change_email": {
    /** Cart email change. */
    post: operations["postCart email changeCollection"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/coupons": {
    /** Create a cart coupon. */
    post: operations["postCart couponCollection"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/coupons/{id}": {
    /** Retrieve a cart coupon by id. */
    get: operations["getCart couponItem"];
    /** Delete a cart coupon by id. */
    delete: operations["deleteCart couponItem"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/items": {
    /** Retrieve a cart item list. */
    get: operations["getCart itemCollection"];
    /** Create a cart item. */
    post: operations["postCart itemCollection"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/items/{id}": {
    /** Retrieve a cart item by id. */
    get: operations["getCart itemItem"];
    /** Delete a cart item by id. */
    delete: operations["deleteCart itemItem"];
    /** Partially change a cart item by id. */
    patch: operations["patchCart itemItem"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/merge": {
    /** Cart merge request. */
    post: operations["postCart merge requestCollection"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/order": {
    /** Create an order. */
    post: operations["postOrderCollection"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/payment/{id}": {
    /** Retrieve an entity by id. */
    get: operations["getPaymentItem"];
    /** Partially change an entity by id. */
    patch: operations["patchPaymentItem"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/payment_methods": {
    /** Retrieve a payment method list. */
    get: operations["getPayment methodCollection"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/payment_methods/{id}": {
    /** Retrieve a payment method by id. */
    get: operations["getPayment methodItem"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/select_payment_method": {
    /** Cart payment method selection. */
    post: operations["postCart payment method selectionCollection"];
    parameters: {};
  };
  "/api/storefront/carts/{cart_id}/select_shipping_method": {
    /** Cart shipping method selection. */
    post: operations["postCart shipping method selectionCollection"];
    parameters: {};
  };
  "/api/storefront/carts/{id}": {
    /** Retrieve a storefront cart by id. */
    get: operations["getStorefront CartItem"];
    /** Delete a storefront cart by id. */
    delete: operations["deleteStorefront CartItem"];
    /** Partially change a storefront cart by id. */
    patch: operations["patchStorefront CartItem"];
    parameters: {};
  };
  "/api/storefront/categories/compact": {
    /** Retrieve a category  list. */
    get: operations["getCategory CompactCollection"];
    parameters: {};
  };
  "/api/storefront/categories/compact/by_clean_url/{clean_url}": {
    /** Retrieve a category by clean url. */
    get: operations["getByCleanURLCategory CompactItem"];
    parameters: {};
  };
  "/api/storefront/categories/compact/{id}": {
    /** Retrieve a category  by id. */
    get: operations["getCategory CompactItem"];
    parameters: {};
  };
  "/api/storefront/categories/detailed": {
    /** Retrieve a category  list. */
    get: operations["getCategory DetailedCollection"];
    parameters: {};
  };
  "/api/storefront/categories/detailed/by_clean_url/{clean_url}": {
    /** Retrieve a category by clean url. */
    get: operations["getByCleanURLCategory DetailedItem"];
    parameters: {};
  };
  "/api/storefront/categories/detailed/{id}": {
    /** Retrieve a category  by id. */
    get: operations["getCategory DetailedItem"];
    parameters: {};
  };
  "/api/storefront/configs": {
    /** Retrieve a config list. */
    get: operations["getConfigCollection"];
    parameters: {};
  };
  "/api/storefront/configs/{id}": {
    /** Retrieve a  config. */
    get: operations["getConfigItem"];
    parameters: {};
  };
  "/api/storefront/countries": {
    /** Retrieve a country list. */
    get: operations["getCountryCollection"];
    parameters: {};
  };
  "/api/storefront/countries/{id}": {
    /** Retrieve a  country. */
    get: operations["getCountryItem"];
    parameters: {};
  };
  "/api/storefront/currencies": {
    /** Retrieve a currency list. */
    get: operations["getCurrencyCollection"];
    parameters: {};
  };
  "/api/storefront/currencies/by_code/{code}": {
    /** Retrieve a currency by code. */
    get: operations["getByCodeCurrencyItem"];
    parameters: {};
  };
  "/api/storefront/currencies/{id}": {
    /** Retrieve a currency by id. */
    get: operations["getCurrencyItem"];
    parameters: {};
  };
  "/api/storefront/menus": {
    /** Retrieve a menu list. */
    get: operations["getMenuCollection"];
    parameters: {};
  };
  "/api/storefront/menus/{id}": {
    /** Retrieve a menu by id. */
    get: operations["getMenuItem"];
    parameters: {};
  };
  "/api/storefront/mmy/garage": {
    /** Retrieve the garage. */
    get: operations["getMMY GarageItem"];
    parameters: {};
  };
  "/api/storefront/mmy/garage/clear": {
    /** Create a mmy garage clear request. */
    post: operations["postMMY Garage clear requestCollection"];
    parameters: {};
  };
  "/api/storefront/mmy/garage/merge": {
    /** Create a mmy garage merge request. */
    post: operations["postMMY Garage merge requestCollection"];
    parameters: {};
  };
  "/api/storefront/mmy/garage/vehicles": {
    /** Add the vehicle to garage. */
    post: operations["postMMY Garage VehicleCollection"];
    parameters: {};
  };
  "/api/storefront/mmy/garage/vehicles/{id}": {
    /** Retrieve the vehicle from the garage. */
    get: operations["getMMY Garage VehicleItem"];
    /** Delete the vehicle from the garage. */
    delete: operations["deleteMMY Garage VehicleItem"];
    parameters: {};
  };
  "/api/storefront/mmy/levels/{depth}": {
    /** Retrieve MMY levels by depth. */
    get: operations["getMMY LevelCollection"];
    parameters: {};
  };
  "/api/storefront/mmy/levels/{depth}/{id}": {
    /** Retrieve MMY level by depth and id. */
    get: operations["getMMY LevelItem"];
    parameters: {};
  };
  "/api/storefront/mmy/levels_setup": {
    /** Retrieve MMY levels setup. */
    get: operations["getMMY Levels SetupItem"];
    parameters: {};
  };
  "/api/storefront/mmy/vin_lookup/{id}": {
    /** Retrieve a vehicle by vin number. */
    get: operations["getVin lookupItem"];
    parameters: {};
  };
  "/api/storefront/pages": {
    /** Retrieve a static page list. */
    get: operations["getStatic PageCollection"];
    parameters: {};
  };
  "/api/storefront/pages/by_clean_url/{clean_url}": {
    /** Retrieve a static page by clean url. */
    get: operations["getByCleanURLStatic PageItem"];
    parameters: {};
  };
  "/api/storefront/pages/{id}": {
    /** Retrieve a static page by id. */
    get: operations["getStatic PageItem"];
    parameters: {};
  };
  "/api/storefront/products/compact": {
    /** Retrieve a product  list. */
    get: operations["getProduct CompactCollection"];
    parameters: {};
  };
  "/api/storefront/products/compact/featured/home_page": {
    /** Retrieve a list of featured products for the home page. */
    get: operations["getFeaturedProductsProduct CompactCollection"];
    parameters: {};
  };
  "/api/storefront/products/compact/featured/{category_id}": {
    /** Retrieve a list of featured products for the category. */
    get: operations["getFeaturedProductsFromCategoryProduct CompactCollection"];
    parameters: {};
  };
  "/api/storefront/products/compact/{id}": {
    /** Retrieve a product  by id. */
    get: operations["getProduct CompactItem"];
    parameters: {};
  };
  "/api/storefront/products/compact/{product_id}/related": {
    /** Retrieve a list of related products. */
    get: operations["getRelatedProductsProduct CompactCollection"];
    parameters: {};
  };
  "/api/storefront/products/detailed/by_clean_url/{clean_url}": {
    /** Retrieve a product by clean url. */
    get: operations["getByCleanURLProduct DetailedItem"];
    parameters: {};
  };
  "/api/storefront/products/detailed/{id}": {
    /** Retrieve a product  by id. */
    get: operations["getProduct DetailedItem"];
    parameters: {};
  };
  "/api/storefront/users": {
    /** Register a new user. */
    post: operations["postUserCollection"];
    parameters: {};
  };
  "/api/storefront/users/self": {
    /** Retrieve an authenticated user. */
    get: operations["getUserItem"];
    /** Delete an authenticated user. */
    delete: operations["deleteUserItem"];
    /** Partially update an authenticated user. */
    patch: operations["patchUserItem"];
    parameters: {};
  };
  "/api/storefront/users/self/addresses": {
    /** Retrieve a user address list. */
    get: operations["getUser AddressCollection"];
    /** Create a user address. */
    post: operations["postUser AddressCollection"];
    parameters: {};
  };
  "/api/storefront/users/self/addresses/{id}": {
    /** Retrieve a user address by id. */
    get: operations["getUser AddressItem"];
    /** Delete a user address by id. */
    delete: operations["deleteUser AddressItem"];
    /** Partially change a user address by id. */
    patch: operations["patchUser AddressItem"];
    parameters: {};
  };
  "/api/storefront/wishlist": {
    /** Retrieve the wishlist. */
    get: operations["getWishlistItem"];
    parameters: {};
  };
  "/api/storefront/wishlist/by_hash/{hash}": {
    /** Retrieve the wishlist by hash. */
    get: operations["getByHashWishlistItem"];
    parameters: {};
  };
  "/api/storefront/wishlist/clear": {
    /** Clear the wishlist. */
    post: operations["clearWishlist clear requestCollection"];
    parameters: {};
  };
  "/api/storefront/wishlist/merge": {
    /** Add one or more products to wishlist. */
    post: operations["mergeWishlist merge requestCollection"];
    parameters: {};
  };
  "/api/storefront/wishlist/product": {
    /** Add product to wishlist. */
    post: operations["postWishlist ProductCollection"];
    parameters: {};
  };
  "/api/storefront/wishlist/product/{id}": {
    /** Retrieve a  wishlist  product. */
    get: operations["getWishlist ProductItem"];
    /** Delete product from wishlist. */
    delete: operations["deleteWishlist ProductItem"];
    parameters: {};
  };
}

export interface components {
  schemas: {
    "ActionData-read": {
      name?: string | null;
      value?: string | null;
    };
    "ActionData-update": {
      name?: string | null;
      value?: string | null;
    };
    "ActionData.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name?: string | null;
      value?: string | null;
    };
    "ActionMetaData-read": {
      name?: string | null;
      value?: string | null;
    };
    "ActionMetaData-update": {
      name?: string | null;
      value?: string | null;
    };
    "ActionMetaData.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name?: string | null;
      value?: string | null;
    };
    "Address.Field-read": {
      serviceName?: string;
      label?: string;
      required?: boolean;
      values?:
        | components["schemas"]["AddressFieldSelectorOption-read"][]
        | null;
      id?: number | null;
    };
    "Address.Field.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      serviceName?: string;
      label?: string;
      required?: boolean;
      values?:
        | components["schemas"]["AddressFieldSelectorOption.jsonld-read"][]
        | null;
      id?: number | null;
    };
    "AddressFieldSelectorOption-read": {
      value?: string;
      label?: string;
    };
    "AddressFieldSelectorOption.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      value?: string;
      label?: string;
    };
    "AddressFieldValue-insert": {
      serviceName?: string | null;
      value?: string | null;
    };
    "AddressFieldValue-read": {
      serviceName?: string | null;
      name?: string;
      value?: string | null;
      required?: boolean;
    };
    "AddressFieldValue-update": {
      serviceName?: string | null;
      value?: string | null;
    };
    "AddressFieldValue.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      serviceName?: string | null;
      value?: string | null;
    };
    "AddressFieldValue.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      serviceName?: string | null;
      name?: string;
      value?: string | null;
      required?: boolean;
    };
    "AttributeValue-insert": {
      attributeId?: number | null;
      attributeValueId?: number | null;
      attributeValue?: string | null;
    };
    "AttributeValue-read": {
      name?: string | null;
      attributeId?: number | null;
      attributeValueId?: number | null;
      attributeValue?: string | null;
    };
    "AttributeValue-update": {
      attributeId?: number | null;
      attributeValueId?: number | null;
      attributeValue?: string | null;
    };
    "AttributeValue.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name?: string | null;
      attributeId?: number | null;
      attributeValueId?: number | null;
      attributeValue?: string | null;
    };
    "AttributeValue.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name?: string | null;
      attributeId?: number | null;
      attributeValueId?: number | null;
      attributeValue?: string | null;
    };
    "Authentication-read": {
      id?: string | null;
      email?: string;
      firstname?: string | null;
      lastname?: string | null;
      roles?: string[];
    };
    "Authentication.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: string | null;
      email?: string;
      firstname?: string | null;
      lastname?: string | null;
      roles?: string[];
    };
    "BackendTransaction-read": {
      status?: string | null;
      value?: number | null;
      type?: string | null;
      data?: components["schemas"]["TransactionData-read"][] | null;
    };
    "BackendTransaction.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      status?: string | null;
      value?: number | null;
      type?: string | null;
      data?: components["schemas"]["TransactionData.jsonld-read"][] | null;
    };
    "Brand-read": {
      name?: string;
      cleanUrl?: string;
      logo?: Partial<components["schemas"]["Image-read"]> | null;
    };
    "Brand.Compact-read": {
      name?: string;
      cleanUrl?: string;
      logo?: Partial<components["schemas"]["Image-read"]> | null;
      id?: number | null;
    };
    "Brand.Compact.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      name?: string;
      cleanUrl?: string;
      logo?: Partial<components["schemas"]["Image.jsonld-read"]> | null;
      id?: number | null;
    };
    "Brand.Detailed-read": {
      name?: string;
      cleanUrl?: string;
      logo?: Partial<components["schemas"]["Image-read"]> | null;
      description?: string;
      metaTags?: string;
      metaDescription?: string;
      metaTitle?: string;
      id?: number | null;
    };
    "Brand.Detailed.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name?: string;
      cleanUrl?: string;
      logo?: Partial<components["schemas"]["Image.jsonld-read"]> | null;
      description?: string;
      metaTags?: string;
      metaDescription?: string;
      metaTitle?: string;
      id?: number | null;
    };
    "Brand.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name?: string;
      cleanUrl?: string;
      logo?: Partial<components["schemas"]["Image.jsonld-read"]> | null;
    };
    "Calculated.shipping.rates-insert": { [key: string]: unknown };
    "Calculated.shipping.rates-read": {
      rates?: components["schemas"]["ShippingRate-read"][];
      /** Format: uuid */
      id?: string | null;
    };
    "Calculated.shipping.rates.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
    };
    "Calculated.shipping.rates.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      rates?: components["schemas"]["ShippingRate.jsonld-read"][];
      /** Format: uuid */
      id?: string | null;
    };
    "Cart.Address-insert": {
      fields?: components["schemas"]["AddressFieldValue-insert"][];
    };
    "Cart.Address-read": {
      cartId?: string;
      isBilling?: boolean;
      isShipping?: boolean;
      fields?: components["schemas"]["AddressFieldValue-read"][];
      id?: number | null;
    };
    "Cart.Address-update": {
      isBilling?: boolean;
      isShipping?: boolean;
      fields?: components["schemas"]["AddressFieldValue-update"][];
    };
    "Cart.Address.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      fields?: components["schemas"]["AddressFieldValue.jsonld-insert"][];
    };
    "Cart.Address.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      cartId?: string;
      isBilling?: boolean;
      isShipping?: boolean;
      fields?: components["schemas"]["AddressFieldValue.jsonld-read"][];
      id?: number | null;
    };
    "Cart.coupon-insert": {
      code?: string;
    };
    "Cart.coupon-read": {
      code?: string;
      /** @enum {string} */
      type?: "$" | "%" | "S";
      value?: number;
      id?: number | null;
    };
    "Cart.coupon.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      code?: string;
    };
    "Cart.coupon.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      code?: string;
      /** @enum {string} */
      type?: "$" | "%" | "S";
      value?: number;
      id?: number | null;
    };
    "Cart.email.change-insert": {
      /** Format: email */
      email?: string;
    };
    "Cart.email.change-read": {
      /** Format: email */
      email?: string;
      /** Format: uuid */
      id?: string | null;
    };
    "Cart.email.change.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Format: email */
      email?: string;
    };
    "Cart.email.change.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Format: email */
      email?: string;
      /** Format: uuid */
      id?: string | null;
    };
    "Cart.item-insert": {
      productId?: number;
      amount?: number;
      attributes?: components["schemas"]["AttributeValue-insert"][];
    };
    "Cart.item-read": {
      productId?: number;
      sku?: string;
      name?: string;
      cleanUrl?: string;
      amount?: number;
      inStock?: number;
      price?: number;
      clear_price?: number;
      net_price?: number;
      display_price?: number;
      attributes?: components["schemas"]["AttributeValue-read"][];
      surcharges?: components["schemas"]["Surcharge-read"][];
      subtotal?: number;
      total?: number;
      images?: components["schemas"]["Image-read"][];
      variant?: Partial<components["schemas"]["ProductVariant-read"]> | null;
      marketPrice?: number;
      id?: number | null;
    };
    "Cart.item-update": {
      amount?: number;
      attributes?: components["schemas"]["AttributeValue-update"][];
    };
    "Cart.item.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      productId?: number;
      amount?: number;
      attributes?: components["schemas"]["AttributeValue.jsonld-insert"][];
    };
    "Cart.item.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      productId?: number;
      sku?: string;
      name?: string;
      cleanUrl?: string;
      amount?: number;
      inStock?: number;
      price?: number;
      clear_price?: number;
      net_price?: number;
      display_price?: number;
      attributes?: components["schemas"]["AttributeValue.jsonld-read"][];
      surcharges?: components["schemas"]["Surcharge.jsonld-read"][];
      subtotal?: number;
      total?: number;
      images?: components["schemas"]["Image.jsonld-read"][];
      variant?: Partial<
        components["schemas"]["ProductVariant.jsonld-read"]
      > | null;
      marketPrice?: number;
      id?: number | null;
    };
    "Cart.merge.request-insert": {
      anonymousCartId?: string;
    };
    "Cart.merge.request-read": {
      /** Format: uuid */
      id?: string | null;
    };
    "Cart.merge.request.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      anonymousCartId?: string;
    };
    "Cart.merge.request.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Format: uuid */
      id?: string | null;
    };
    "Cart.payment.method.selection-insert": {
      paymentMethodId?: number;
    };
    "Cart.payment.method.selection-read": {
      paymentMethodId?: number;
      /** Format: uuid */
      id?: string | null;
    };
    "Cart.payment.method.selection.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      paymentMethodId?: number;
    };
    "Cart.payment.method.selection.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      paymentMethodId?: number;
      /** Format: uuid */
      id?: string | null;
    };
    "Cart.shipping.method.selection-insert": {
      shippingMethodId?: number;
    };
    "Cart.shipping.method.selection-read": {
      shippingMethodId?: number;
      /** Format: uuid */
      id?: string | null;
    };
    "Cart.shipping.method.selection.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      shippingMethodId?: number;
    };
    "Cart.shipping.method.selection.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      shippingMethodId?: number;
      /** Format: uuid */
      id?: string | null;
    };
    "Category.Compact-read": {
      name?: string;
      cleanUrl?: string | null;
      showTitle?: boolean;
      icon?: Partial<components["schemas"]["Image-read"]> | null;
      banner?: Partial<components["schemas"]["Image-read"]> | null;
      path?: components["schemas"]["PathElement-read"][];
      hasSubcategories?: boolean;
      id?: number | null;
    };
    "Category.Compact.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      name?: string;
      cleanUrl?: string | null;
      showTitle?: boolean;
      icon?: Partial<components["schemas"]["Image.jsonld-read"]> | null;
      banner?: Partial<components["schemas"]["Image.jsonld-read"]> | null;
      path?: components["schemas"]["PathElement.jsonld-read"][];
      hasSubcategories?: boolean;
      id?: number | null;
    };
    "Category.Detailed-read": {
      name?: string;
      description?: string;
      cleanUrl?: string | null;
      showTitle?: boolean;
      banner?: Partial<components["schemas"]["Image-read"]> | null;
      metaTags?: string | null;
      metaDescription?: string | null;
      metaTitle?: string;
      path?: components["schemas"]["PathElement-read"][];
      hasSubcategories?: boolean;
      ogMetaTags?: string | null;
      id?: number | null;
    };
    "Category.Detailed.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      name?: string;
      description?: string;
      cleanUrl?: string | null;
      showTitle?: boolean;
      banner?: Partial<components["schemas"]["Image.jsonld-read"]> | null;
      metaTags?: string | null;
      metaDescription?: string | null;
      metaTitle?: string;
      path?: components["schemas"]["PathElement.jsonld-read"][];
      hasSubcategories?: boolean;
      ogMetaTags?: string | null;
      id?: number | null;
    };
    "Config-read": {
      id?: string;
      name?: string;
      category?: string;
      value?: string | null;
    };
    "Config.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      id?: string;
      name?: string;
      category?: string;
      value?: string | null;
    };
    "Country-read": {
      id?: string;
      code?: string;
      name?: string;
      regions?: components["schemas"]["Region-read"][];
      states?: components["schemas"]["State-read"][];
      activeCurrency?: string | null;
    };
    "Country.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      id?: string;
      code?: string;
      name?: string;
      regions?: components["schemas"]["Region.jsonld-read"][];
      states?: components["schemas"]["State.jsonld-read"][];
      activeCurrency?: string | null;
    };
    "Currency-read": {
      code?: string;
      rate?: number;
      prefix?: string;
      suffix?: string;
      precision?: number;
      decimalDelimiter?: string;
      thousandDelimiter?: string;
      default?: boolean;
      countries?: string[];
      id?: number | null;
    };
    "Currency.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      code?: string;
      rate?: number;
      prefix?: string;
      suffix?: string;
      precision?: number;
      decimalDelimiter?: string;
      thousandDelimiter?: string;
      default?: boolean;
      countries?: string[];
      id?: number | null;
    };
    "FileAttachment-read": {
      title?: string;
      description?: string;
      url?: string;
    };
    "FileAttachment.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      title?: string;
      description?: string;
      url?: string;
    };
    "Image-read": {
      url?: string;
      width?: number | null;
      height?: number | null;
      alt?: string | null;
    };
    "Image.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      url?: string;
      width?: number | null;
      height?: number | null;
      alt?: string | null;
    };
    "Level-read": {
      name?: string;
      id?: number;
    };
    "Level.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name?: string;
      id?: number;
    };
    "MMY.Garage-read": {
      vehicles?: components["schemas"]["Vehicle-read"][];
    };
    "MMY.Garage.Vehicle": { [key: string]: unknown };
    "MMY.Garage.Vehicle-insert": {
      vehicleId?: number;
    };
    "MMY.Garage.Vehicle-read": {
      name?: string;
      levels?: components["schemas"]["Level-read"][];
      id?: number | null;
    };
    "MMY.Garage.Vehicle.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
    };
    "MMY.Garage.Vehicle.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      vehicleId?: number;
    };
    "MMY.Garage.Vehicle.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name?: string;
      levels?: components["schemas"]["Level.jsonld-read"][];
      id?: number | null;
    };
    "MMY.Garage.clear.request-insert": { [key: string]: unknown };
    "MMY.Garage.clear.request-read": {
      id?: number | null;
    };
    "MMY.Garage.clear.request.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
    };
    "MMY.Garage.clear.request.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number | null;
    };
    "MMY.Garage.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      vehicles?: components["schemas"]["Vehicle.jsonld-read"][];
    };
    "MMY.Garage.merge.request-insert": {
      vehicleIds?: number[];
    };
    "MMY.Garage.merge.request-read": {
      id?: number | null;
    };
    "MMY.Garage.merge.request.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      vehicleIds?: number[];
    };
    "MMY.Garage.merge.request.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number | null;
    };
    "MMY.Level-read": {
      name?: string;
      title?: string;
      description?: string;
      parent_level_id?: number | null;
      logo_url?: string;
      banner_urls?: string[];
      id?: number | null;
    };
    "MMY.Level.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      name?: string;
      title?: string;
      description?: string;
      parent_level_id?: number | null;
      logo_url?: string;
      banner_urls?: string[];
      id?: number | null;
    };
    "MMY.Levels.Setup-read": {
      levels?: components["schemas"]["MmyLevelsSetupItem-read"][];
    };
    "MMY.Levels.Setup.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      levels?: components["schemas"]["MmyLevelsSetupItem.jsonld-read"][];
    };
    "Menu-read": {
      name?: string | null;
      link?: string | null;
      submenuCount?: number;
      id?: number | null;
    };
    "Menu.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      name?: string | null;
      link?: string | null;
      submenuCount?: number;
      id?: number | null;
    };
    "MmyLevelsSetupItem-read": {
      name?: string;
      /** @enum {string} */
      type?: "year" | "text";
      enabled?: boolean;
    };
    "MmyLevelsSetupItem.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name?: string;
      /** @enum {string} */
      type?: "year" | "text";
      enabled?: boolean;
    };
    "Order-insert": { [key: string]: unknown };
    "Order-read": {
      number?: string;
      id?: number | null;
    };
    "Order.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
    };
    "Order.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      number?: string;
      id?: number | null;
    };
    "PathElement-read": {
      id?: number;
      name?: string;
      cleanUrl?: string | null;
    };
    "PathElement.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
      cleanUrl?: string | null;
    };
    "Payment-read": {
      id?: string | null;
      status?: string | null;
      value?: number | null;
      type?: string | null;
      data?: components["schemas"]["TransactionData-read"][] | null;
      backendTransactions?:
        | components["schemas"]["BackendTransaction-read"][]
        | null;
      processor?: string | null;
      action?: string | null;
      actionData?: components["schemas"]["ActionData-read"][] | null;
      actionMetaData?: components["schemas"]["ActionMetaData-read"][] | null;
    };
    "Payment-update": {
      action?: string | null;
      actionData?: components["schemas"]["ActionData-update"][] | null;
      actionMetaData?: components["schemas"]["ActionMetaData-update"][] | null;
    };
    "Payment.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: string | null;
      status?: string | null;
      value?: number | null;
      type?: string | null;
      data?: components["schemas"]["TransactionData.jsonld-read"][] | null;
      backendTransactions?:
        | components["schemas"]["BackendTransaction.jsonld-read"][]
        | null;
      processor?: string | null;
      action?: string | null;
      actionData?: components["schemas"]["ActionData.jsonld-read"][] | null;
      actionMetaData?:
        | components["schemas"]["ActionMetaData.jsonld-read"][]
        | null;
    };
    "Payment.method-read": {
      serviceName?: string;
      name?: string;
      title?: string;
      description?: string;
      instruction?: string;
      id?: number | null;
    };
    "Payment.method.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      serviceName?: string;
      name?: string;
      title?: string;
      description?: string;
      instruction?: string;
      id?: number | null;
    };
    "Product.Compact-read": {
      sku?: string;
      name?: string;
      cleanUrl?: string;
      briefDescription?: string;
      price?: number | null;
      requiresShipping?: boolean;
      arrivalDate?: number;
      amount?: number;
      images?: components["schemas"]["Image-read"][];
      participateSale?: boolean;
      /** @enum {string} */
      discountType?: "sale_price" | "sale_percent";
      saleValue?: number;
      salePrice?: number;
      brandName?: string | null;
      stickers?: components["schemas"]["Sticker-read"][];
      minPurchaseQuantity?: number;
      marketPrice?: number;
      canBeBackordered?: boolean;
      backorderQtyLabel?: string;
      isLimitedBackorder?: boolean;
      backorderLimit?: number;
      id?: number | null;
    };
    "Product.Compact.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      sku?: string;
      name?: string;
      cleanUrl?: string;
      briefDescription?: string;
      price?: number | null;
      requiresShipping?: boolean;
      arrivalDate?: number;
      amount?: number;
      images?: components["schemas"]["Image.jsonld-read"][];
      participateSale?: boolean;
      /** @enum {string} */
      discountType?: "sale_price" | "sale_percent";
      saleValue?: number;
      salePrice?: number;
      brandName?: string | null;
      stickers?: components["schemas"]["Sticker.jsonld-read"][];
      minPurchaseQuantity?: number;
      marketPrice?: number;
      canBeBackordered?: boolean;
      backorderQtyLabel?: string;
      isLimitedBackorder?: boolean;
      backorderLimit?: number;
      id?: number | null;
    };
    "Product.Detailed-read": {
      sku?: string;
      name?: string;
      cleanUrl?: string;
      briefDescription?: string;
      price?: number | null;
      weight?: number;
      requiresShipping?: boolean;
      arrivalDate?: number;
      amount?: number;
      images?: components["schemas"]["Image-read"][];
      path?: components["schemas"]["ProductCategory-read"][];
      description?: string;
      metaTags?: string;
      metaDescription?: string;
      metaTitle?: string;
      attributes?: components["schemas"]["ProductAttribute-read"][];
      dimensions?: components["schemas"]["ProductDimensions-read"];
      fitment?: components["schemas"]["ProductFitment-read"];
      tabs?: components["schemas"]["ProductTab-read"][];
      participateSale?: boolean;
      /** @enum {string} */
      discountType?: "sale_price" | "sale_percent";
      saleValue?: number;
      salePrice?: number;
      brand?: Partial<components["schemas"]["Brand-read"]> | null;
      attachments?: components["schemas"]["FileAttachment-read"][];
      tags?: string[];
      stickers?: components["schemas"]["Sticker-read"][];
      upc?: string | null;
      mnf?: string | null;
      variants?: components["schemas"]["ProductVariant-read"][];
      minPurchaseQuantity?: number;
      applySaleToWholesale?: boolean;
      wholesalePrices?: components["schemas"]["WholesalePrice-read"][];
      marketPrice?: number;
      canBeBackordered?: boolean;
      backorderQtyLabel?: string;
      isLimitedBackorder?: boolean;
      backorderLimit?: number;
      id?: number | null;
    };
    "Product.Detailed.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      sku?: string;
      name?: string;
      cleanUrl?: string;
      briefDescription?: string;
      price?: number | null;
      weight?: number;
      requiresShipping?: boolean;
      arrivalDate?: number;
      amount?: number;
      images?: components["schemas"]["Image.jsonld-read"][];
      path?: components["schemas"]["ProductCategory.jsonld-read"][];
      description?: string;
      metaTags?: string;
      metaDescription?: string;
      metaTitle?: string;
      attributes?: components["schemas"]["ProductAttribute.jsonld-read"][];
      dimensions?: components["schemas"]["ProductDimensions.jsonld-read"];
      fitment?: components["schemas"]["ProductFitment.jsonld-read"];
      tabs?: components["schemas"]["ProductTab.jsonld-read"][];
      participateSale?: boolean;
      /** @enum {string} */
      discountType?: "sale_price" | "sale_percent";
      saleValue?: number;
      salePrice?: number;
      brand?: Partial<components["schemas"]["Brand.jsonld-read"]> | null;
      attachments?: components["schemas"]["FileAttachment.jsonld-read"][];
      tags?: string[];
      stickers?: components["schemas"]["Sticker.jsonld-read"][];
      upc?: string | null;
      mnf?: string | null;
      variants?: components["schemas"]["ProductVariant.jsonld-read"][];
      minPurchaseQuantity?: number;
      applySaleToWholesale?: boolean;
      wholesalePrices?: components["schemas"]["WholesalePrice.jsonld-read"][];
      marketPrice?: number;
      canBeBackordered?: boolean;
      backorderQtyLabel?: string;
      isLimitedBackorder?: boolean;
      backorderLimit?: number;
      id?: number | null;
    };
    "ProductAttribute-read": {
      id?: number;
      name?: string;
      /** @enum {string} */
      type?: "T" | "C" | "S" | "H";
      /** @enum {string} */
      displayMode?: "S" | "B" | "C";
      editable?: boolean;
      displayAbove?: boolean;
      values?: components["schemas"]["ProductAttributeValue-read"][];
      group?: string | null;
    };
    "ProductAttribute.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
      /** @enum {string} */
      type?: "T" | "C" | "S" | "H";
      /** @enum {string} */
      displayMode?: "S" | "B" | "C";
      editable?: boolean;
      displayAbove?: boolean;
      values?: components["schemas"]["ProductAttributeValue.jsonld-read"][];
      group?: string | null;
    };
    "ProductAttributeValue-read": {
      id?: number;
      value?: string;
      priceModifier?: number;
      priceModifierType?: string;
      weightModifier?: number;
      weightModifierType?: string;
      isDefault?: boolean;
      swatchColor?: string;
      swatchImage?: components["schemas"]["SwatchImage-read"];
    };
    "ProductAttributeValue.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      value?: string;
      priceModifier?: number;
      priceModifierType?: string;
      weightModifier?: number;
      weightModifierType?: string;
      isDefault?: boolean;
      swatchColor?: string;
      swatchImage?: components["schemas"]["SwatchImage.jsonld-read"];
    };
    "ProductCategory-read": {
      id?: number;
      name?: string;
      cleanUrl?: string;
    };
    "ProductCategory.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
      cleanUrl?: string;
    };
    "ProductDimensions-read": {
      length?: number;
      width?: number;
      height?: number;
    };
    "ProductDimensions.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      length?: number;
      width?: number;
      height?: number;
    };
    "ProductFitment-read": {
      /** @enum {string} */
      type?: "regular" | "universal" | "specific";
      fitments?: components["schemas"]["Vehicle-read"][];
    };
    "ProductFitment.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** @enum {string} */
      type?: "regular" | "universal" | "specific";
      fitments?: components["schemas"]["Vehicle.jsonld-read"][];
    };
    "ProductTab-read": {
      serviceName?: string;
      name?: string;
      content?: string;
      briefInfo?: string;
    };
    "ProductTab.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      serviceName?: string;
      name?: string;
      content?: string;
      briefInfo?: string;
    };
    "ProductVariant-read": {
      id?: number;
      sku?: string;
      price?: number | null;
      amount?: number;
      weight?: number;
      image?: Partial<components["schemas"]["Image-read"]> | null;
      attributes?: components["schemas"]["VariantAttribute-read"][];
      isDefault?: boolean;
      discountType?: string;
      saleValue?: number;
      salePrice?: number;
      upc?: string | null;
      mnf?: string | null;
      wholesalePrices?: components["schemas"]["WholesalePrice-read"][] | null;
    };
    "ProductVariant.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      sku?: string;
      price?: number | null;
      amount?: number;
      weight?: number;
      image?: Partial<components["schemas"]["Image.jsonld-read"]> | null;
      attributes?: components["schemas"]["VariantAttribute.jsonld-read"][];
      isDefault?: boolean;
      discountType?: string;
      saleValue?: number;
      salePrice?: number;
      upc?: string | null;
      mnf?: string | null;
      wholesalePrices?:
        | components["schemas"]["WholesalePrice.jsonld-read"][]
        | null;
    };
    "Region-read": {
      code?: string;
      name?: string;
    };
    "Region.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      code?: string;
      name?: string;
    };
    "ShippingMethod-read": {
      id?: number;
      name?: string;
    };
    "ShippingMethod.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
    };
    "ShippingRate-read": {
      method?: components["schemas"]["ShippingMethod-read"];
      value?: number;
      preparedDeliveryTime?: string | null;
    };
    "ShippingRate.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      method?: components["schemas"]["ShippingMethod.jsonld-read"];
      value?: number;
      preparedDeliveryTime?: string | null;
    };
    "State-read": {
      id?: number;
      regionCode?: string | null;
      name?: string;
      code?: string;
    };
    "State.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      regionCode?: string | null;
      name?: string;
      code?: string;
    };
    "Static.Page-read": {
      name?: string;
      cleanUrl?: string | null;
      body?: string;
      metaDescription?: string;
      metaKeywords?: string;
      metaTitle?: string;
      image?: Partial<components["schemas"]["Image-read"]> | null;
      id?: number | null;
    };
    "Static.Page.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      name?: string;
      cleanUrl?: string | null;
      body?: string;
      metaDescription?: string;
      metaKeywords?: string;
      metaTitle?: string;
      image?: Partial<components["schemas"]["Image.jsonld-read"]> | null;
      id?: number | null;
    };
    "Sticker-read": {
      label?: string;
      textColor?: string;
      bgColor?: string;
    };
    "Sticker.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      label?: string;
      textColor?: string;
      bgColor?: string;
    };
    "Storefront.Cart-insert": { [key: string]: unknown };
    "Storefront.Cart-read": {
      email?: string;
      items?: components["schemas"]["Cart.item-read"][];
      subTotal?: number;
      total?: number;
      payment?: Partial<components["schemas"]["Payment.method-read"]> | null;
      paymentTransaction?: string | null;
      shipping?: Partial<components["schemas"]["ShippingMethod-read"]> | null;
      surcharges?: components["schemas"]["Surcharge-read"][];
      coupons?: components["schemas"]["Cart.coupon-read"][];
      /** Format: uuid */
      id?: string | null;
    };
    "Storefront.Cart-update": { [key: string]: unknown };
    "Storefront.Cart.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
    };
    "Storefront.Cart.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      email?: string;
      items?: components["schemas"]["Cart.item.jsonld-read"][];
      subTotal?: number;
      total?: number;
      payment?: Partial<
        components["schemas"]["Payment.method.jsonld-read"]
      > | null;
      paymentTransaction?: string | null;
      shipping?: Partial<
        components["schemas"]["ShippingMethod.jsonld-read"]
      > | null;
      surcharges?: components["schemas"]["Surcharge.jsonld-read"][];
      coupons?: components["schemas"]["Cart.coupon.jsonld-read"][];
      /** Format: uuid */
      id?: string | null;
    };
    "Surcharge-read": {
      type?: string;
      name?: string;
      value?: number;
    };
    "Surcharge.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      type?: string;
      name?: string;
      value?: number;
    };
    "SwatchImage-read": {
      url?: string;
      width?: number;
      height?: number;
    };
    "SwatchImage.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      url?: string;
      width?: number;
      height?: number;
    };
    "TransactionData-read": {
      name?: string | null;
      value?: string | null;
    };
    "TransactionData.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name?: string | null;
      value?: string | null;
    };
    "User-insert_update": {
      /** Format: email */
      login?: string;
      password?: string;
    };
    "User-read": {
      /** Format: email */
      login?: string;
      membership?: string | null;
      cartId?: string | null;
      id?: number | null;
    };
    "User.Address-insert": {
      fields?: components["schemas"]["AddressFieldValue-insert"][];
    };
    "User.Address-read": {
      isBilling?: boolean;
      isShipping?: boolean;
      fields?: components["schemas"]["AddressFieldValue-read"][];
      id?: number | null;
    };
    "User.Address-update": {
      isBilling?: boolean;
      isShipping?: boolean;
      fields?: components["schemas"]["AddressFieldValue-update"][];
    };
    "User.Address.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      fields?: components["schemas"]["AddressFieldValue.jsonld-insert"][];
    };
    "User.Address.jsonld-read": {
      "@id"?: string;
      "@type"?: string;
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      isBilling?: boolean;
      isShipping?: boolean;
      fields?: components["schemas"]["AddressFieldValue.jsonld-read"][];
      id?: number | null;
    };
    "User.jsonld-insert_update": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Format: email */
      login?: string;
      password?: string;
    };
    "User.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      /** Format: email */
      login?: string;
      membership?: string | null;
      cartId?: string | null;
      id?: number | null;
    };
    "VariantAttribute-read": {
      id?: number;
      name?: string;
      value?: string;
    };
    "VariantAttribute.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number;
      name?: string;
      value?: string;
    };
    "Vehicle-read": {
      name?: string;
      levels?: components["schemas"]["Level-read"][];
    };
    "Vehicle.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      name?: string;
      levels?: components["schemas"]["Level.jsonld-read"][];
    };
    "Vin.lookup-read": {
      vehicle?: Partial<components["schemas"]["Vehicle-read"]> | null;
      error?: string | null;
    };
    "Vin.lookup.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      vehicle?: Partial<components["schemas"]["Vehicle.jsonld-read"]> | null;
      error?: string | null;
    };
    "WholesalePrice-read": {
      quantityRangeBegin?: number;
      quantityRangeEnd?: number | null;
      /** @enum {string} */
      type?: "price" | "percent";
      value?: number;
    };
    "WholesalePrice.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      quantityRangeBegin?: number;
      quantityRangeEnd?: number | null;
      /** @enum {string} */
      type?: "price" | "percent";
      value?: number;
    };
    "Wishlist-read": {
      hash?: string | null;
      productIds?: number[];
      id?: number | null;
    };
    "Wishlist.Product": { [key: string]: unknown };
    "Wishlist.Product-insert": {
      productId?: number;
    };
    "Wishlist.Product-read": {
      id?: number | null;
    };
    "Wishlist.Product.jsonld": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
    };
    "Wishlist.Product.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      productId?: number;
    };
    "Wishlist.Product.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number | null;
    };
    "Wishlist.clear.request-insert_update": { [key: string]: unknown };
    "Wishlist.clear.request-read": {
      id?: number | null;
    };
    "Wishlist.clear.request.jsonld-insert_update": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
    };
    "Wishlist.clear.request.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number | null;
    };
    "Wishlist.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      hash?: string | null;
      productIds?: number[];
      id?: number | null;
    };
    "Wishlist.merge.request-insert": {
      productIds?: number[];
    };
    "Wishlist.merge.request-read": {
      id?: number | null;
    };
    "Wishlist.merge.request.jsonld-insert": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      productIds?: number[];
    };
    "Wishlist.merge.request.jsonld-read": {
      "@context"?:
        | string
        | ({
            "@vocab": string;
            /** @enum {string} */
            hydra: "http://www.w3.org/ns/hydra/core#";
          } & { [key: string]: unknown });
      "@id"?: string;
      "@type"?: string;
      id?: number | null;
    };
    Error: {
      /** Format: url */
      type?: string;
      title?: string;
      detail?: string | null;
      instance?: string | null;
    };
    "Auth.Token": {
      token?: string;
      refresh_token?: string;
      refresh_token_expiration?: number;
    };
  };
  responses: {};
  parameters: {};
  requestBodies: {};
  headers: {};
}

export interface operations {
  /** Retrieve an address field list. */
  "getAddress FieldCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Address Field collection */
      200: {
        content: {
          "application/json": components["schemas"]["Address.Field-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Address.Field.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Address.Field-read"][];
          "text/html": components["schemas"]["Address.Field-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve an address field by id. */
  "getAddress FieldItem": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Address Field resource */
      200: {
        content: {
          "application/json": components["schemas"]["Address.Field-read"];
          "application/ld+json": components["schemas"]["Address.Field.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Address.Field-read"];
          "text/html": components["schemas"]["Address.Field-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  apiStorefrontAuthLogin: {
    parameters: {};
    responses: {
      /** User authorized */
      200: {
        content: {
          "application/json": components["schemas"]["Auth.Token"];
          "application/ld+json": components["schemas"]["Auth.Token"];
          "application/vnd.api+json": components["schemas"]["Auth.Token"];
          "text/html": components["schemas"]["Auth.Token"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Invalid credentials */
      401: unknown;
    };
    /** User credentials */
    requestBody: {
      content: {
        "application/json": {
          username?: string;
          password?: string;
        };
      };
    };
  };
  apiStorefrontAuthLogout: {
    parameters: {};
    responses: {
      /** The supplied refresh_token has been invalidated */
      200: {
        content: {
          "application/json": {
            /** @example 200 */
            code?: number;
            /** @example The supplied refresh_token has been invalidated. */
            message?: string;
          };
          "application/ld+json": {
            /** @example 200 */
            code?: number;
            /** @example The supplied refresh_token has been invalidated. */
            message?: string;
          };
          "application/vnd.api+json": {
            /** @example 200 */
            code?: number;
            /** @example The supplied refresh_token has been invalidated. */
            message?: string;
          };
          "text/html": {
            /** @example 200 */
            code?: number;
            /** @example The supplied refresh_token has been invalidated. */
            message?: string;
          };
        };
      };
      /** No refresh_token found */
      400: {
        content: {
          "application/json": {
            /** @example 200 */
            code?: number;
            /** @example The supplied refresh_token has been invalidated. */
            message?: string;
          };
          "application/ld+json": {
            /** @example 200 */
            code?: number;
            /** @example The supplied refresh_token has been invalidated. */
            message?: string;
          };
          "application/vnd.api+json": {
            /** @example 200 */
            code?: number;
            /** @example The supplied refresh_token has been invalidated. */
            message?: string;
          };
          "text/html": {
            /** @example 200 */
            code?: number;
            /** @example The supplied refresh_token has been invalidated. */
            message?: string;
          };
        };
      };
      /** Expired JWT Token */
      401: {
        content: {
          "application/json": {
            /** @example 200 */
            code?: number;
            /** @example The supplied refresh_token has been invalidated. */
            message?: string;
          };
          "application/ld+json": {
            /** @example 200 */
            code?: number;
            /** @example The supplied refresh_token has been invalidated. */
            message?: string;
          };
          "application/vnd.api+json": {
            /** @example 200 */
            code?: number;
            /** @example The supplied refresh_token has been invalidated. */
            message?: string;
          };
          "text/html": {
            /** @example 200 */
            code?: number;
            /** @example The supplied refresh_token has been invalidated. */
            message?: string;
          };
        };
      };
    };
    /** Refresh token */
    requestBody: {
      content: {
        "application/json": {
          refresh_token?: string;
        };
      };
    };
  };
  apiStorefrontAuthRefresh: {
    parameters: {};
    responses: {
      /** User authorized */
      200: {
        content: {
          "application/json": components["schemas"]["Auth.Token"];
          "application/ld+json": components["schemas"]["Auth.Token"];
          "application/vnd.api+json": components["schemas"]["Auth.Token"];
          "text/html": components["schemas"]["Auth.Token"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Invalid credentials */
      401: unknown;
    };
    /** Refresh token */
    requestBody: {
      content: {
        "application/json": {
          refresh_token?: string;
        };
      };
    };
  };
  /** Reset password and send new password to the user's e-mail. */
  resetPasswordAuthenticationCollection: {
    parameters: {};
    responses: {
      /** New password was sent to the user's e-mail successfully */
      204: never;
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: email */
          username?: string;
        };
      };
    };
  };
  /** Retrieve user info of an authenticated user. */
  whoamiAuthenticationItem: {
    parameters: {};
    responses: {
      /** Authentication resource */
      200: {
        content: {
          "application/json": components["schemas"]["Authentication-read"];
          "application/ld+json": components["schemas"]["Authentication.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Authentication-read"];
          "text/html": components["schemas"]["Authentication-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a brand  list. */
  "getBrand CompactCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        /** Filter for "firstLetter" field */
        "filter.firstLetter"?: string;
        /** Filter for "substring" field */
        "filter.substring"?: string;
      };
    };
    responses: {
      /** Brand Compact collection */
      200: {
        content: {
          "application/json": components["schemas"]["Brand.Compact-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Brand.Compact.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Brand.Compact-read"][];
          "text/html": components["schemas"]["Brand.Compact-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a brand  by id. */
  "getBrand CompactItem": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Brand Compact resource */
      200: {
        content: {
          "application/json": components["schemas"]["Brand.Compact-read"];
          "application/ld+json": components["schemas"]["Brand.Compact.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Brand.Compact-read"];
          "text/html": components["schemas"]["Brand.Compact-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a brand by clean url. */
  "getByCleanURLBrand DetailedItem": {
    parameters: {
      path: {
        /** Resource identifier */
        clean_url: string;
      };
    };
    responses: {
      /** Brand Detailed resource */
      200: {
        content: {
          "application/json": components["schemas"]["Brand.Detailed-read"];
          "application/ld+json": components["schemas"]["Brand.Detailed.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Brand.Detailed-read"];
          "text/html": components["schemas"]["Brand.Detailed-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a brand  by id. */
  "getBrand DetailedItem": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Brand Detailed resource */
      200: {
        content: {
          "application/json": components["schemas"]["Brand.Detailed-read"];
          "application/ld+json": components["schemas"]["Brand.Detailed.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Brand.Detailed-read"];
          "text/html": components["schemas"]["Brand.Detailed-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create a storefront cart. */
  "postStorefront CartCollection": {
    parameters: {};
    responses: {
      /** Storefront Cart resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Storefront.Cart-read"];
          "application/ld+json": components["schemas"]["Storefront.Cart.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Storefront.Cart-read"];
          "text/html": components["schemas"]["Storefront.Cart-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new Storefront Cart resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Storefront.Cart-insert"];
        "application/ld+json": components["schemas"]["Storefront.Cart.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["Storefront.Cart-insert"];
        "text/html": components["schemas"]["Storefront.Cart-insert"];
      };
    };
  };
  /** Retrieve a cart address list. */
  "getCart AddressCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
      path: {
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart Address collection */
      200: {
        content: {
          "application/json": components["schemas"]["Cart.Address-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Cart.Address.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Cart.Address-read"][];
          "text/html": components["schemas"]["Cart.Address-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create a cart address. */
  "postCart AddressCollection": {
    parameters: {
      path: {
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart Address resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Cart.Address-read"];
          "application/ld+json": components["schemas"]["Cart.Address.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Cart.Address-read"];
          "text/html": components["schemas"]["Cart.Address-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new Cart Address resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Cart.Address-insert"];
        "application/ld+json": components["schemas"]["Cart.Address.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["Cart.Address-insert"];
        "text/html": components["schemas"]["Cart.Address-insert"];
      };
    };
  };
  /** Retrieve a cart address by id. */
  "getCart AddressItem": {
    parameters: {
      path: {
        id: number;
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart Address resource */
      200: {
        content: {
          "application/json": components["schemas"]["Cart.Address-read"];
          "application/ld+json": components["schemas"]["Cart.Address.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Cart.Address-read"];
          "text/html": components["schemas"]["Cart.Address-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a cart address by id. */
  "deleteCart AddressItem": {
    parameters: {
      path: {
        id: number;
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart Address resource deleted */
      204: never;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Partially change a cart address by id. */
  "patchCart AddressItem": {
    parameters: {
      path: {
        id: number;
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart Address resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Cart.Address-read"];
          "application/ld+json": components["schemas"]["Cart.Address.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Cart.Address-read"];
          "text/html": components["schemas"]["Cart.Address-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The updated Cart Address resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Cart.Address-update"];
        "application/vnd.api+json": components["schemas"]["Cart.Address-update"];
      };
    };
  };
  /** Calculated shipping rates. */
  "postCalculated shipping ratesCollection": {
    parameters: {
      path: {
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Calculated shipping rates resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Calculated.shipping.rates-read"];
          "application/ld+json": components["schemas"]["Calculated.shipping.rates.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Calculated.shipping.rates-read"];
          "text/html": components["schemas"]["Calculated.shipping.rates-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new Calculated shipping rates resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Calculated.shipping.rates-insert"];
        "application/ld+json": components["schemas"]["Calculated.shipping.rates.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["Calculated.shipping.rates-insert"];
        "text/html": components["schemas"]["Calculated.shipping.rates-insert"];
      };
    };
  };
  /** Cart email change. */
  "postCart email changeCollection": {
    parameters: {
      path: {
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart email change resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Cart.email.change-read"];
          "application/ld+json": components["schemas"]["Cart.email.change.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Cart.email.change-read"];
          "text/html": components["schemas"]["Cart.email.change-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new Cart email change resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Cart.email.change-insert"];
        "application/ld+json": components["schemas"]["Cart.email.change.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["Cart.email.change-insert"];
        "text/html": components["schemas"]["Cart.email.change-insert"];
      };
    };
  };
  /** Create a cart coupon. */
  "postCart couponCollection": {
    parameters: {
      path: {
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart coupon resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Cart.coupon-read"];
          "application/ld+json": components["schemas"]["Cart.coupon.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Cart.coupon-read"];
          "text/html": components["schemas"]["Cart.coupon-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new Cart coupon resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Cart.coupon-insert"];
        "application/ld+json": components["schemas"]["Cart.coupon.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["Cart.coupon-insert"];
        "text/html": components["schemas"]["Cart.coupon-insert"];
      };
    };
  };
  /** Retrieve a cart coupon by id. */
  "getCart couponItem": {
    parameters: {
      path: {
        id: number;
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart coupon resource */
      200: {
        content: {
          "application/json": components["schemas"]["Cart.coupon-read"];
          "application/ld+json": components["schemas"]["Cart.coupon.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Cart.coupon-read"];
          "text/html": components["schemas"]["Cart.coupon-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a cart coupon by id. */
  "deleteCart couponItem": {
    parameters: {
      path: {
        id: number;
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart coupon resource deleted */
      204: never;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a cart item list. */
  "getCart itemCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
      path: {
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart item collection */
      200: {
        content: {
          "application/json": components["schemas"]["Cart.item-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Cart.item.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Cart.item-read"][];
          "text/html": components["schemas"]["Cart.item-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create a cart item. */
  "postCart itemCollection": {
    parameters: {
      path: {
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart item resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Cart.item-read"];
          "application/ld+json": components["schemas"]["Cart.item.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Cart.item-read"];
          "text/html": components["schemas"]["Cart.item-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new Cart item resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Cart.item-insert"];
        "application/ld+json": components["schemas"]["Cart.item.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["Cart.item-insert"];
        "text/html": components["schemas"]["Cart.item-insert"];
      };
    };
  };
  /** Retrieve a cart item by id. */
  "getCart itemItem": {
    parameters: {
      path: {
        id: number;
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart item resource */
      200: {
        content: {
          "application/json": components["schemas"]["Cart.item-read"];
          "application/ld+json": components["schemas"]["Cart.item.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Cart.item-read"];
          "text/html": components["schemas"]["Cart.item-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a cart item by id. */
  "deleteCart itemItem": {
    parameters: {
      path: {
        id: number;
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart item resource deleted */
      204: never;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Partially change a cart item by id. */
  "patchCart itemItem": {
    parameters: {
      path: {
        id: number;
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart item resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Cart.item-read"];
          "application/ld+json": components["schemas"]["Cart.item.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Cart.item-read"];
          "text/html": components["schemas"]["Cart.item-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The updated Cart item resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Cart.item-update"];
        "application/vnd.api+json": components["schemas"]["Cart.item-update"];
      };
    };
  };
  /** Cart merge request. */
  "postCart merge requestCollection": {
    parameters: {
      path: {
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart merge request resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Cart.merge.request-read"];
          "application/ld+json": components["schemas"]["Cart.merge.request.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Cart.merge.request-read"];
          "text/html": components["schemas"]["Cart.merge.request-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new Cart merge request resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Cart.merge.request-insert"];
        "application/ld+json": components["schemas"]["Cart.merge.request.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["Cart.merge.request-insert"];
        "text/html": components["schemas"]["Cart.merge.request-insert"];
      };
    };
  };
  /** Create an order. */
  postOrderCollection: {
    parameters: {
      path: {
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Order resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Order-read"];
          "application/ld+json": components["schemas"]["Order.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Order-read"];
          "text/html": components["schemas"]["Order-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new Order resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Order-insert"];
        "application/ld+json": components["schemas"]["Order.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["Order-insert"];
        "text/html": components["schemas"]["Order-insert"];
      };
    };
  };
  /** Retrieve an entity by id. */
  getPaymentItem: {
    parameters: {
      path: {
        id: string;
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Payment resource */
      200: {
        content: {
          "application/json": components["schemas"]["Payment-read"];
          "application/ld+json": components["schemas"]["Payment.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Payment-read"];
          "text/html": components["schemas"]["Payment-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Partially change an entity by id. */
  patchPaymentItem: {
    parameters: {
      path: {
        id: string;
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Payment resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Payment-read"];
          "application/ld+json": components["schemas"]["Payment.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Payment-read"];
          "text/html": components["schemas"]["Payment-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The updated Payment resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Payment-update"];
        "application/vnd.api+json": components["schemas"]["Payment-update"];
      };
    };
  };
  /** Retrieve a payment method list. */
  "getPayment methodCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
      path: {
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Payment method collection */
      200: {
        content: {
          "application/json": components["schemas"]["Payment.method-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Payment.method.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Payment.method-read"][];
          "text/html": components["schemas"]["Payment.method-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a payment method by id. */
  "getPayment methodItem": {
    parameters: {
      path: {
        id: number;
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Payment method resource */
      200: {
        content: {
          "application/json": components["schemas"]["Payment.method-read"];
          "application/ld+json": components["schemas"]["Payment.method.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Payment.method-read"];
          "text/html": components["schemas"]["Payment.method-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Cart payment method selection. */
  "postCart payment method selectionCollection": {
    parameters: {
      path: {
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart payment method selection resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Cart.payment.method.selection-read"];
          "application/ld+json": components["schemas"]["Cart.payment.method.selection.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Cart.payment.method.selection-read"];
          "text/html": components["schemas"]["Cart.payment.method.selection-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new Cart payment method selection resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Cart.payment.method.selection-insert"];
        "application/ld+json": components["schemas"]["Cart.payment.method.selection.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["Cart.payment.method.selection-insert"];
        "text/html": components["schemas"]["Cart.payment.method.selection-insert"];
      };
    };
  };
  /** Cart shipping method selection. */
  "postCart shipping method selectionCollection": {
    parameters: {
      path: {
        /** Cart ID */
        cart_id: string;
      };
    };
    responses: {
      /** Cart shipping method selection resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Cart.shipping.method.selection-read"];
          "application/ld+json": components["schemas"]["Cart.shipping.method.selection.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Cart.shipping.method.selection-read"];
          "text/html": components["schemas"]["Cart.shipping.method.selection-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new Cart shipping method selection resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Cart.shipping.method.selection-insert"];
        "application/ld+json": components["schemas"]["Cart.shipping.method.selection.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["Cart.shipping.method.selection-insert"];
        "text/html": components["schemas"]["Cart.shipping.method.selection-insert"];
      };
    };
  };
  /** Retrieve a storefront cart by id. */
  "getStorefront CartItem": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Storefront Cart resource */
      200: {
        content: {
          "application/json": components["schemas"]["Storefront.Cart-read"];
          "application/ld+json": components["schemas"]["Storefront.Cart.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Storefront.Cart-read"];
          "text/html": components["schemas"]["Storefront.Cart-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a storefront cart by id. */
  "deleteStorefront CartItem": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Storefront Cart resource deleted */
      204: never;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Partially change a storefront cart by id. */
  "patchStorefront CartItem": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Storefront Cart resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Storefront.Cart-read"];
          "application/ld+json": components["schemas"]["Storefront.Cart.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Storefront.Cart-read"];
          "text/html": components["schemas"]["Storefront.Cart-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The updated Storefront Cart resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["Storefront.Cart-update"];
        "application/vnd.api+json": components["schemas"]["Storefront.Cart-update"];
      };
    };
  };
  /** Retrieve a category  list. */
  "getCategory CompactCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        /** Filter for "parent" field */
        "filter.parent"?: number;
        "order_by.pos"?: "asc" | "desc";
      };
    };
    responses: {
      /** Category Compact collection */
      200: {
        content: {
          "application/json": components["schemas"]["Category.Compact-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Category.Compact.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Category.Compact-read"][];
          "text/html": components["schemas"]["Category.Compact-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a category by clean url. */
  "getByCleanURLCategory CompactItem": {
    parameters: {
      path: {
        /** Full category clean url */
        clean_url: string;
      };
    };
    responses: {
      /** Category Compact resource */
      200: {
        content: {
          "application/json": components["schemas"]["Category.Compact-read"];
          "application/ld+json": components["schemas"]["Category.Compact.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Category.Compact-read"];
          "text/html": components["schemas"]["Category.Compact-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a category  by id. */
  "getCategory CompactItem": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Category Compact resource */
      200: {
        content: {
          "application/json": components["schemas"]["Category.Compact-read"];
          "application/ld+json": components["schemas"]["Category.Compact.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Category.Compact-read"];
          "text/html": components["schemas"]["Category.Compact-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a category  list. */
  "getCategory DetailedCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        /** Filter for "parent" field */
        "filter.parent"?: number;
        "order_by.pos"?: "asc" | "desc";
      };
    };
    responses: {
      /** Category Detailed collection */
      200: {
        content: {
          "application/json": components["schemas"]["Category.Detailed-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Category.Detailed.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Category.Detailed-read"][];
          "text/html": components["schemas"]["Category.Detailed-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a category by clean url. */
  "getByCleanURLCategory DetailedItem": {
    parameters: {
      path: {
        /** Full category clean url */
        clean_url: string;
      };
    };
    responses: {
      /** Category Detailed resource */
      200: {
        content: {
          "application/json": components["schemas"]["Category.Detailed-read"];
          "application/ld+json": components["schemas"]["Category.Detailed.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Category.Detailed-read"];
          "text/html": components["schemas"]["Category.Detailed-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a category  by id. */
  "getCategory DetailedItem": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Category Detailed resource */
      200: {
        content: {
          "application/json": components["schemas"]["Category.Detailed-read"];
          "application/ld+json": components["schemas"]["Category.Detailed.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Category.Detailed-read"];
          "text/html": components["schemas"]["Category.Detailed-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a config list. */
  getConfigCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Config collection */
      200: {
        content: {
          "application/json": components["schemas"]["Config-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Config.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Config-read"][];
          "text/html": components["schemas"]["Config-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a  config. */
  getConfigItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Config resource */
      200: {
        content: {
          "application/json": components["schemas"]["Config-read"];
          "application/ld+json": components["schemas"]["Config.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Config-read"];
          "text/html": components["schemas"]["Config-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a country list. */
  getCountryCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Country collection */
      200: {
        content: {
          "application/json": components["schemas"]["Country-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Country.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Country-read"][];
          "text/html": components["schemas"]["Country-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a  country. */
  getCountryItem: {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** Country resource */
      200: {
        content: {
          "application/json": components["schemas"]["Country-read"];
          "application/ld+json": components["schemas"]["Country.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Country-read"];
          "text/html": components["schemas"]["Country-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a currency list. */
  getCurrencyCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Currency collection */
      200: {
        content: {
          "application/json": components["schemas"]["Currency-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Currency.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Currency-read"][];
          "text/html": components["schemas"]["Currency-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a currency by code. */
  getByCodeCurrencyItem: {
    parameters: {
      path: {
        /** Resource identifier */
        code: string;
      };
    };
    responses: {
      /** Currency resource */
      200: {
        content: {
          "application/json": components["schemas"]["Currency-read"];
          "application/ld+json": components["schemas"]["Currency.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Currency-read"];
          "text/html": components["schemas"]["Currency-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a currency by id. */
  getCurrencyItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Currency resource */
      200: {
        content: {
          "application/json": components["schemas"]["Currency-read"];
          "application/ld+json": components["schemas"]["Currency.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Currency-read"];
          "text/html": components["schemas"]["Currency-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a menu list. */
  getMenuCollection: {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        /** Filter for "type" field */
        "filter.type"?: string;
        /** Filter for "parent" field */
        "filter.parent"?: number;
      };
    };
    responses: {
      /** Menu collection */
      200: {
        content: {
          "application/json": components["schemas"]["Menu-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Menu.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Menu-read"][];
          "text/html": components["schemas"]["Menu-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a menu by id. */
  getMenuItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Menu resource */
      200: {
        content: {
          "application/json": components["schemas"]["Menu-read"];
          "application/ld+json": components["schemas"]["Menu.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Menu-read"];
          "text/html": components["schemas"]["Menu-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve the garage. */
  "getMMY GarageItem": {
    parameters: {};
    responses: {
      /** MMY Garage resource */
      200: {
        content: {
          "application/json": components["schemas"]["MMY.Garage-read"];
          "application/ld+json": components["schemas"]["MMY.Garage.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["MMY.Garage-read"];
          "text/html": components["schemas"]["MMY.Garage-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create a mmy garage clear request. */
  "postMMY Garage clear requestCollection": {
    parameters: {};
    responses: {
      /** MMY Garage clear request resource created */
      201: {
        content: {
          "application/json": components["schemas"]["MMY.Garage.clear.request-read"];
          "application/ld+json": components["schemas"]["MMY.Garage.clear.request.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["MMY.Garage.clear.request-read"];
          "text/html": components["schemas"]["MMY.Garage.clear.request-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new MMY Garage clear request resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MMY.Garage.clear.request-insert"];
        "application/ld+json": components["schemas"]["MMY.Garage.clear.request.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["MMY.Garage.clear.request-insert"];
        "text/html": components["schemas"]["MMY.Garage.clear.request-insert"];
      };
    };
  };
  /** Create a mmy garage merge request. */
  "postMMY Garage merge requestCollection": {
    parameters: {};
    responses: {
      /** MMY Garage merge request resource created */
      201: {
        content: {
          "application/json": components["schemas"]["MMY.Garage.merge.request-read"];
          "application/ld+json": components["schemas"]["MMY.Garage.merge.request.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["MMY.Garage.merge.request-read"];
          "text/html": components["schemas"]["MMY.Garage.merge.request-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new MMY Garage merge request resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MMY.Garage.merge.request-insert"];
        "application/ld+json": components["schemas"]["MMY.Garage.merge.request.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["MMY.Garage.merge.request-insert"];
        "text/html": components["schemas"]["MMY.Garage.merge.request-insert"];
      };
    };
  };
  /** Add the vehicle to garage. */
  "postMMY Garage VehicleCollection": {
    parameters: {};
    responses: {
      /** MMY Garage Vehicle resource created */
      201: {
        content: {
          "application/json": components["schemas"]["MMY.Garage.Vehicle"];
          "application/ld+json": components["schemas"]["MMY.Garage.Vehicle.jsonld"];
          "application/vnd.api+json": components["schemas"]["MMY.Garage.Vehicle"];
          "text/html": components["schemas"]["MMY.Garage.Vehicle"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new MMY Garage Vehicle resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MMY.Garage.Vehicle-insert"];
        "application/ld+json": components["schemas"]["MMY.Garage.Vehicle.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["MMY.Garage.Vehicle-insert"];
        "text/html": components["schemas"]["MMY.Garage.Vehicle-insert"];
      };
    };
  };
  /** Retrieve the vehicle from the garage. */
  "getMMY Garage VehicleItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** MMY Garage Vehicle resource */
      200: {
        content: {
          "application/json": components["schemas"]["MMY.Garage.Vehicle-read"];
          "application/ld+json": components["schemas"]["MMY.Garage.Vehicle.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["MMY.Garage.Vehicle-read"];
          "text/html": components["schemas"]["MMY.Garage.Vehicle-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete the vehicle from the garage. */
  "deleteMMY Garage VehicleItem": {
    parameters: {
      path: {
        /** Resource identifier */
        id: string;
      };
    };
    responses: {
      /** MMY Garage Vehicle resource deleted */
      204: never;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve MMY levels by depth. */
  "getMMY LevelCollection": {
    parameters: {
      path: {
        /** Level depth (1, 2, 3 or 4) */
        depth: 1 | 2 | 3 | 4;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        /** Filter for "firstLetter" field */
        "filter.firstLetter"?: string;
        /** Filter for "substring" field */
        "filter.substring"?: string;
        /** Filter for "parent" field */
        "filter.parent"?: number;
        /** Filter for "showOnFrontPage" field */
        "filter.showOnFrontPage"?: boolean;
      };
    };
    responses: {
      /** MMY Level collection */
      200: {
        content: {
          "application/json": components["schemas"]["MMY.Level-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["MMY.Level.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["MMY.Level-read"][];
          "text/html": components["schemas"]["MMY.Level-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve MMY level by depth and id. */
  "getMMY LevelItem": {
    parameters: {
      path: {
        /** Level depth (1, 2, 3 or 4) */
        depth: 1 | 2 | 3 | 4;
        id: number;
      };
    };
    responses: {
      /** MMY Level resource */
      200: {
        content: {
          "application/json": components["schemas"]["MMY.Level-read"];
          "application/ld+json": components["schemas"]["MMY.Level.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["MMY.Level-read"];
          "text/html": components["schemas"]["MMY.Level-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve MMY levels setup. */
  "getMMY Levels SetupItem": {
    parameters: {};
    responses: {
      /** MMY Levels Setup resource */
      200: {
        content: {
          "application/json": components["schemas"]["MMY.Levels.Setup-read"];
          "application/ld+json": components["schemas"]["MMY.Levels.Setup.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["MMY.Levels.Setup-read"];
          "text/html": components["schemas"]["MMY.Levels.Setup-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a vehicle by vin number. */
  "getVin lookupItem": {
    parameters: {
      path: {
        /** Vin number */
        id: string;
      };
    };
    responses: {
      /** Vin lookup resource */
      200: {
        content: {
          "application/json": components["schemas"]["Vin.lookup-read"];
          "application/ld+json": components["schemas"]["Vin.lookup.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Vin.lookup-read"];
          "text/html": components["schemas"]["Vin.lookup-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a static page list. */
  "getStatic PageCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Static Page collection */
      200: {
        content: {
          "application/json": components["schemas"]["Static.Page-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Static.Page.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Static.Page-read"][];
          "text/html": components["schemas"]["Static.Page-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a static page by clean url. */
  "getByCleanURLStatic PageItem": {
    parameters: {
      path: {
        /** Resource identifier */
        clean_url: string;
      };
    };
    responses: {
      /** Static Page resource */
      200: {
        content: {
          "application/json": components["schemas"]["Static.Page-read"];
          "application/ld+json": components["schemas"]["Static.Page.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Static.Page-read"];
          "text/html": components["schemas"]["Static.Page-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a static page by id. */
  "getStatic PageItem": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Static Page resource */
      200: {
        content: {
          "application/json": components["schemas"]["Static.Page-read"];
          "application/ld+json": components["schemas"]["Static.Page.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Static.Page-read"];
          "text/html": components["schemas"]["Static.Page-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a product  list. */
  "getProduct CompactCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
        /** Filter for "products" field */
        "filter.products"?: string;
        /** Filter for "categories" field */
        "filter.categories"?: string;
        /** Filter for "outOfStock" field */
        "filter.outOfStock"?: boolean;
        /** Filter for "participateSale" field */
        "filter.participateSale"?: boolean;
        /** Filter for "bestsellers" field */
        "filter.bestsellers"?: boolean;
        /** Filter for "newArrivals" field */
        "filter.newArrivals"?: boolean;
        /** Filter for "comingSoon" field */
        "filter.comingSoon"?: boolean;
        /** Filter for "substring" field */
        "filter.substring"?: string;
        "order_by.name"?: "asc" | "desc";
        "order_by.price"?: "asc" | "desc";
        "order_by.arrivalDate"?: "asc" | "desc";
        "order_by.sales"?: "asc" | "desc";
        /** Filter for "levelId" field */
        "filter.levelId"?: number;
        /** Filter for "brandId" field */
        "filter.brandId"?: number;
      };
    };
    responses: {
      /** Product Compact collection */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Compact-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.Compact.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Product.Compact-read"][];
          "text/html": components["schemas"]["Product.Compact-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a list of featured products for the home page. */
  "getFeaturedProductsProduct CompactCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Product Compact collection */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Compact-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.Compact.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Product.Compact-read"][];
          "text/html": components["schemas"]["Product.Compact-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a list of featured products for the category. */
  "getFeaturedProductsFromCategoryProduct CompactCollection": {
    parameters: {
      path: {
        category_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Product Compact collection */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Compact-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.Compact.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Product.Compact-read"][];
          "text/html": components["schemas"]["Product.Compact-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a product  by id. */
  "getProduct CompactItem": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Product Compact resource */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Compact-read"];
          "application/ld+json": components["schemas"]["Product.Compact.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Product.Compact-read"];
          "text/html": components["schemas"]["Product.Compact-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a list of related products. */
  "getRelatedProductsProduct CompactCollection": {
    parameters: {
      path: {
        product_id: number;
      };
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** Product Compact collection */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Compact-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["Product.Compact.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["Product.Compact-read"][];
          "text/html": components["schemas"]["Product.Compact-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a product by clean url. */
  "getByCleanURLProduct DetailedItem": {
    parameters: {
      path: {
        /** Resource identifier */
        clean_url: string;
      };
    };
    responses: {
      /** Product Detailed resource */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Detailed-read"];
          "application/ld+json": components["schemas"]["Product.Detailed.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Product.Detailed-read"];
          "text/html": components["schemas"]["Product.Detailed-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve a product  by id. */
  "getProduct DetailedItem": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Product Detailed resource */
      200: {
        content: {
          "application/json": components["schemas"]["Product.Detailed-read"];
          "application/ld+json": components["schemas"]["Product.Detailed.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Product.Detailed-read"];
          "text/html": components["schemas"]["Product.Detailed-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Register a new user. */
  postUserCollection: {
    parameters: {};
    responses: {
      /** User resource created */
      201: {
        content: {
          "application/json": components["schemas"]["User-read"];
          "application/ld+json": components["schemas"]["User.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["User-read"];
          "text/html": components["schemas"]["User-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new User resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["User-insert_update"];
        "application/ld+json": components["schemas"]["User.jsonld-insert_update"];
        "application/vnd.api+json": components["schemas"]["User-insert_update"];
        "text/html": components["schemas"]["User-insert_update"];
      };
    };
  };
  /** Retrieve an authenticated user. */
  getUserItem: {
    parameters: {};
    responses: {
      /** User resource */
      200: {
        content: {
          "application/json": components["schemas"]["User-read"];
          "application/ld+json": components["schemas"]["User.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["User-read"];
          "text/html": components["schemas"]["User-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete an authenticated user. */
  deleteUserItem: {
    parameters: {};
    responses: {
      /** User resource deleted */
      204: never;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Partially update an authenticated user. */
  patchUserItem: {
    parameters: {};
    responses: {
      /** User resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["User-read"];
          "application/ld+json": components["schemas"]["User.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["User-read"];
          "text/html": components["schemas"]["User-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The updated User resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["User-insert_update"];
        "application/vnd.api+json": components["schemas"]["User-insert_update"];
      };
    };
  };
  /** Retrieve a user address list. */
  "getUser AddressCollection": {
    parameters: {
      query: {
        /** The collection page number */
        page?: number;
        /** The number of items per page */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** User Address collection */
      200: {
        content: {
          "application/json": components["schemas"]["User.Address-read"][];
          "application/ld+json": {
            "hydra:member": components["schemas"]["User.Address.jsonld-read"][];
            "hydra:totalItems"?: number;
            /**
             * @example {
             *   "@id": "string",
             *   "type": "string",
             *   "hydra:first": "string",
             *   "hydra:last": "string",
             *   "hydra:previous": "string",
             *   "hydra:next": "string"
             * }
             */
            "hydra:view"?: {
              /** Format: iri-reference */
              "@id"?: string;
              "@type"?: string;
              /** Format: iri-reference */
              "hydra:first"?: string;
              /** Format: iri-reference */
              "hydra:last"?: string;
              /** Format: iri-reference */
              "hydra:previous"?: string;
              /** Format: iri-reference */
              "hydra:next"?: string;
            };
            "hydra:search"?: {
              "@type"?: string;
              "hydra:template"?: string;
              "hydra:variableRepresentation"?: string;
              "hydra:mapping"?: {
                "@type"?: string;
                variable?: string;
                property?: string | null;
                required?: boolean;
              }[];
            };
          };
          "application/vnd.api+json": components["schemas"]["User.Address-read"][];
          "text/html": components["schemas"]["User.Address-read"][];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create a user address. */
  "postUser AddressCollection": {
    parameters: {};
    responses: {
      /** User Address resource created */
      201: {
        content: {
          "application/json": components["schemas"]["User.Address-read"];
          "application/ld+json": components["schemas"]["User.Address.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["User.Address-read"];
          "text/html": components["schemas"]["User.Address-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new User Address resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["User.Address-insert"];
        "application/ld+json": components["schemas"]["User.Address.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["User.Address-insert"];
        "text/html": components["schemas"]["User.Address-insert"];
      };
    };
  };
  /** Retrieve a user address by id. */
  "getUser AddressItem": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** User Address resource */
      200: {
        content: {
          "application/json": components["schemas"]["User.Address-read"];
          "application/ld+json": components["schemas"]["User.Address.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["User.Address-read"];
          "text/html": components["schemas"]["User.Address-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete a user address by id. */
  "deleteUser AddressItem": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** User Address resource deleted */
      204: never;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Partially change a user address by id. */
  "patchUser AddressItem": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** User Address resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["User.Address-read"];
          "application/ld+json": components["schemas"]["User.Address.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["User.Address-read"];
          "text/html": components["schemas"]["User.Address-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The updated User Address resource */
    requestBody: {
      content: {
        "application/merge-patch+json": components["schemas"]["User.Address-update"];
        "application/vnd.api+json": components["schemas"]["User.Address-update"];
      };
    };
  };
  /** Retrieve the wishlist. */
  getWishlistItem: {
    parameters: {};
    responses: {
      /** Wishlist resource */
      200: {
        content: {
          "application/json": components["schemas"]["Wishlist-read"];
          "application/ld+json": components["schemas"]["Wishlist.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Wishlist-read"];
          "text/html": components["schemas"]["Wishlist-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve the wishlist by hash. */
  getByHashWishlistItem: {
    parameters: {
      path: {
        /** Resource identifier */
        hash: string;
      };
    };
    responses: {
      /** Wishlist resource */
      200: {
        content: {
          "application/json": components["schemas"]["Wishlist-read"];
          "application/ld+json": components["schemas"]["Wishlist.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Wishlist-read"];
          "text/html": components["schemas"]["Wishlist-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Clear the wishlist. */
  "clearWishlist clear requestCollection": {
    parameters: {};
    responses: {
      /** Wishlist clear request resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Wishlist.clear.request-read"];
          "application/ld+json": components["schemas"]["Wishlist.clear.request.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Wishlist.clear.request-read"];
          "text/html": components["schemas"]["Wishlist.clear.request-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new Wishlist clear request resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Wishlist.clear.request-insert_update"];
        "application/ld+json": components["schemas"]["Wishlist.clear.request.jsonld-insert_update"];
        "application/vnd.api+json": components["schemas"]["Wishlist.clear.request-insert_update"];
        "text/html": components["schemas"]["Wishlist.clear.request-insert_update"];
      };
    };
  };
  /** Add one or more products to wishlist. */
  "mergeWishlist merge requestCollection": {
    parameters: {};
    responses: {
      /** Wishlist merge request resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Wishlist.merge.request-read"];
          "application/ld+json": components["schemas"]["Wishlist.merge.request.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Wishlist.merge.request-read"];
          "text/html": components["schemas"]["Wishlist.merge.request-read"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new Wishlist merge request resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Wishlist.merge.request-insert"];
        "application/ld+json": components["schemas"]["Wishlist.merge.request.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["Wishlist.merge.request-insert"];
        "text/html": components["schemas"]["Wishlist.merge.request-insert"];
      };
    };
  };
  /** Add product to wishlist. */
  "postWishlist ProductCollection": {
    parameters: {};
    responses: {
      /** Wishlist Product resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Wishlist.Product"];
          "application/ld+json": components["schemas"]["Wishlist.Product.jsonld"];
          "application/vnd.api+json": components["schemas"]["Wishlist.Product"];
          "text/html": components["schemas"]["Wishlist.Product"];
        };
      };
      /** Invalid input */
      400: unknown;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Unprocessable entity */
      422: unknown;
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
    /** The new Wishlist Product resource */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Wishlist.Product-insert"];
        "application/ld+json": components["schemas"]["Wishlist.Product.jsonld-insert"];
        "application/vnd.api+json": components["schemas"]["Wishlist.Product-insert"];
        "text/html": components["schemas"]["Wishlist.Product-insert"];
      };
    };
  };
  /** Retrieve a  wishlist  product. */
  "getWishlist ProductItem": {
    parameters: {
      path: {
        /** product id */
        id: number;
      };
    };
    responses: {
      /** Wishlist Product resource */
      200: {
        content: {
          "application/json": components["schemas"]["Wishlist.Product-read"];
          "application/ld+json": components["schemas"]["Wishlist.Product.jsonld-read"];
          "application/vnd.api+json": components["schemas"]["Wishlist.Product-read"];
          "text/html": components["schemas"]["Wishlist.Product-read"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Delete product from wishlist. */
  "deleteWishlist ProductItem": {
    parameters: {
      path: {
        /** product id */
        id: number;
      };
    };
    responses: {
      /** Wishlist Product resource deleted */
      204: never;
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
          "application/ld+json": components["schemas"]["Error"];
          "application/vnd.api+json": components["schemas"]["Error"];
          "text/html": components["schemas"]["Error"];
        };
      };
    };
  };
}

export interface external {}
export type getAddressFieldCollection = operations['getAddress FieldCollection']
export type getAddressFieldItem = operations['getAddress FieldItem']
export type apiStorefrontAuthLogin = operations['apiStorefrontAuthLogin']
export type apiStorefrontAuthLogout = operations['apiStorefrontAuthLogout']
export type apiStorefrontAuthRefresh = operations['apiStorefrontAuthRefresh']
export type resetPasswordAuthenticationCollection = operations['resetPasswordAuthenticationCollection']
export type whoamiAuthenticationItem = operations['whoamiAuthenticationItem']
export type getBrandCompactCollection = operations['getBrand CompactCollection']
export type getBrandCompactItem = operations['getBrand CompactItem']
export type getByCleanURLBrandDetailedItem = operations['getByCleanURLBrand DetailedItem']
export type getBrandDetailedItem = operations['getBrand DetailedItem']
export type createCart = operations['postStorefront CartCollection']
export type getCartAddressCollection = operations['getCart AddressCollection']
export type postCartAddressCollection = operations['postCart AddressCollection']
export type getCartAddressItem = operations['getCart AddressItem']
export type deleteCartAddressItem = operations['deleteCart AddressItem']
export type patchCartAddressItem = operations['patchCart AddressItem']
export type postCalculatedshippingratesCollection = operations['postCalculated shipping ratesCollection']
export type postCartemailchangeCollection = operations['postCart email changeCollection']
export type postCartcouponCollection = operations['postCart couponCollection']
export type getCartcouponItem = operations['getCart couponItem']
export type deleteCartcouponItem = operations['deleteCart couponItem']
export type getCartitemCollection = operations['getCart itemCollection']
export type addProduct = operations['postCart itemCollection']
export type getCartitemItem = operations['getCart itemItem']
export type deleteProduct = operations['deleteCart itemItem']
export type updateProduct = operations['patchCart itemItem']
export type mergeCart = operations['postCart merge requestCollection']
export type postOrderCollection = operations['postOrderCollection']
export type getPaymentItem = operations['getPaymentItem']
export type patchPaymentItem = operations['patchPaymentItem']
export type getPaymentmethodCollection = operations['getPayment methodCollection']
export type getPaymentmethodItem = operations['getPayment methodItem']
export type postCartpaymentmethodselectionCollection = operations['postCart payment method selectionCollection']
export type postCartshippingmethodselectionCollection = operations['postCart shipping method selectionCollection']
export type getCart = operations['getStorefront CartItem']
export type deleteCart = operations['deleteStorefront CartItem']
export type updateCart = operations['patchStorefront CartItem']
export type getCompactCategoryCollection = operations['getCategory CompactCollection']
export type getCompactCategoryByCleanURL = operations['getByCleanURLCategory CompactItem']
export type getCompactCategoryById = operations['getCategory CompactItem']
export type getDetailedCategoryCollection = operations['getCategory DetailedCollection']
export type getDetailedCategoryByCleanURL = operations['getByCleanURLCategory DetailedItem']
export type getDetailedCategoryById = operations['getCategory DetailedItem']
export type getConfigCollection = operations['getConfigCollection']
export type getConfigItem = operations['getConfigItem']
export type getCountryCollection = operations['getCountryCollection']
export type getCountryItem = operations['getCountryItem']
export type getCurrencyCollection = operations['getCurrencyCollection']
export type getByCodeCurrencyItem = operations['getByCodeCurrencyItem']
export type getCurrencyItem = operations['getCurrencyItem']
export type getMenuCollection = operations['getMenuCollection']
export type getMenuItem = operations['getMenuItem']
export type getGarage = operations['getMMY GarageItem']
export type clearGarage = operations['postMMY Garage clear requestCollection']
export type mergeGarage = operations['postMMY Garage merge requestCollection']
export type addVehicle = operations['postMMY Garage VehicleCollection']
export type getVehicle = operations['getMMY Garage VehicleItem']
export type deleteVehicle = operations['deleteMMY Garage VehicleItem']
export type getMMYLevel = operations['getMMY LevelCollection']
export type getMMYLevelById = operations['getMMY LevelItem']
export type getMMYLevels = operations['getMMY Levels SetupItem']
export type getVehicleByVIN = operations['getVin lookupItem']
export type getStaticPageCollection = operations['getStatic PageCollection']
export type getByCleanURLStaticPageItem = operations['getByCleanURLStatic PageItem']
export type getStaticPageItem = operations['getStatic PageItem']
export type getCompactProductCollection = operations['getProduct CompactCollection']
export type getFeaturedProductsProductCompactCollection = operations['getFeaturedProductsProduct CompactCollection']
export type getFeaturedProductsFromCategoryProductCompactCollection = operations['getFeaturedProductsFromCategoryProduct CompactCollection']
export type getCompactProductById = operations['getProduct CompactItem']
export type getRelatedProducts = operations['getRelatedProductsProduct CompactCollection']
export type getDetailedProductByCleanURL = operations['getByCleanURLProduct DetailedItem']
export type getDetailedProductById = operations['getProduct DetailedItem']
export type postUserCollection = operations['postUserCollection']
export type getUserItem = operations['getUserItem']
export type deleteUserItem = operations['deleteUserItem']
export type patchUserItem = operations['patchUserItem']
export type getUserAddressCollection = operations['getUser AddressCollection']
export type postUserAddressCollection = operations['postUser AddressCollection']
export type getUserAddressItem = operations['getUser AddressItem']
export type deleteUserAddressItem = operations['deleteUser AddressItem']
export type patchUserAddressItem = operations['patchUser AddressItem']
export type getWishlist = operations['getWishlistItem']
export type getWishlistByHash = operations['getByHashWishlistItem']
export type clearWishlist = operations['clearWishlist clear requestCollection']
export type mergeWishlist = operations['mergeWishlist merge requestCollection']
export type addToWishlist = operations['postWishlist ProductCollection']
export type getWishlistProduct = operations['getWishlist ProductItem']
export type deleteFromWishlist = operations['deleteWishlist ProductItem']
